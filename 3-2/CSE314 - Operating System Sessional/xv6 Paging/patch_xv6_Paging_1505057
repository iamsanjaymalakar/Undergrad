commit 4a9d9941b5549b79ca12b3ede537d1fb807e45d7
Author: Sanjay Malakar <iamsanjaymalakar@gmail.com>
Date:   Sun Feb 10 21:40:14 2019 +0600

    final commit

diff --git a/defs.h b/defs.h
index 82fb982..ccc57e5 100644
--- a/defs.h
+++ b/defs.h
@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+
 
 // ide.c
 void            ideinit(void);
@@ -124,6 +129,11 @@ void            yield(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
@@ -185,6 +195,6 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
-
+void			swapPageFromSF(uint);
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/exec.c b/exec.c
index b40134f..0936514 100644
--- a/exec.c
+++ b/exec.c
@@ -29,6 +29,30 @@ exec(char *path, char **argv)
   ilock(ip);
   pgdir = 0;
 
+  /***************************************************/
+  // copy and init
+  int ppmCount = myproc()->ppmCount;
+  int psfCount = myproc()->psfCount;
+  int pfCount = myproc()->pfCount;
+  int poCount = myproc()->poCount;
+  struct pagePhyMem ppm[MAX_PSYC_PAGES];
+  struct pageSwapFile psf[MAX_PSYC_PAGES];
+  struct pagePhyMem *head = myproc()->head;
+  myproc()->ppmCount = 0;
+  myproc()->psfCount = 0;
+  myproc()->pfCount = 0;
+  myproc()->poCount = 0;
+  myproc()->head = 0;
+  for(i=0;i<MAX_PSYC_PAGES;i++) 
+  {
+    ppm[i].va = myproc()->ppm[i].va;
+    myproc()->ppm[i].va = (char*)0xffffffff;
+    ppm[i].next = myproc()->ppm[i].next;
+    myproc()->ppm[i].next = 0;
+    psf[i].va = myproc()->psf[i].va;
+    myproc()->psf[i].va = (char*)0xffffffff;
+  }
+  /***************************************************/
   // Check ELF header
   if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
     goto bad;
@@ -36,7 +60,7 @@ exec(char *path, char **argv)
     goto bad;
 
   if((pgdir = setupkvm()) == 0)
-    goto bad;
+    goto bad;  
 
   // Load program into memory.
   sz = 0;
@@ -99,8 +123,14 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+
+  /****************************************************/
+  removeSwapFile(curproc);
+  createSwapFile(curproc);
+  /****************************************************/
   switchuvm(curproc);
   freevm(oldpgdir);
+  cprintf("no. of pages allocated on exec:%d, pid:%d, name:%s\n", myproc()->ppmCount, myproc()->pid, myproc()->name);
   return 0;
 
  bad:
@@ -110,5 +140,17 @@ exec(char *path, char **argv)
     iunlockput(ip);
     end_op();
   }
+  // failed so reinit
+  myproc()->ppmCount = ppmCount;
+  myproc()->psfCount = psfCount;
+  myproc()->pfCount = pfCount;
+  myproc()->poCount = poCount;
+  myproc()->head = head;
+  for(i=0;i<MAX_PSYC_PAGES;i++) 
+  {
+    myproc()->ppm[i].va = ppm[i].va;
+    myproc()->ppm[i].next = ppm[i].next;
+    myproc()->psf[i].va = psf[i].va;
+  }
   return -1;
 }
diff --git a/fs.c b/fs.c
index feb59fe..f7c92cf 100644
--- a/fs.c
+++ b/fs.c
@@ -669,3 +669,144 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+// NEW FOR PAGING
+
+#include "fcntl.h"
+#define DIGITS 14
+
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+
+	ilock(dp);
+
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+
+	end_op();
+
+	return 0;
+
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+
+}
+
+
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+
+    return 0;
+}
+
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return filewrite(p->swapFile, buffer, size);
+
+}
+
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return fileread(p->swapFile, buffer,  size);
+}
+
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/paging.patch b/paging.patch
new file mode 100644
index 0000000..54ef2b9
--- /dev/null
+++ b/paging.patch
@@ -0,0 +1,225 @@
+diff --git a/defs.h b/defs.h
+index 82fb982..f33f2cb 100644
+--- a/defs.h
++++ b/defs.h
+@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
+ int             readi(struct inode*, char*, uint, uint);
+ void            stati(struct inode*, struct stat*);
+ int             writei(struct inode*, char*, uint, uint);
++int             createSwapFile(struct proc* p);
++int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
++int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
++int             removeSwapFile(struct proc* p);
++
+ 
+ // ide.c
+ void            ideinit(void);
+@@ -124,6 +129,11 @@ void            yield(void);
+ // swtch.S
+ void            swtch(struct context**, struct context*);
+ 
++// sysfile
++struct inode*   create(char *path, short type, short major, short minor);
++int             isdirempty(struct inode *dp);
++
++
+ // spinlock.c
+ void            acquire(struct spinlock*);
+ void            getcallerpcs(void*, uint*);
+diff --git a/fs.c b/fs.c
+index feb59fe..f7c92cf 100644
+--- a/fs.c
++++ b/fs.c
+@@ -669,3 +669,144 @@ nameiparent(char *path, char *name)
+ {
+   return namex(path, 1, name);
+ }
++
++// NEW FOR PAGING
++
++#include "fcntl.h"
++#define DIGITS 14
++
++char* itoa(int i, char b[]){
++    char const digit[] = "0123456789";
++    char* p = b;
++    if(i<0){
++        *p++ = '-';
++        i *= -1;
++    }
++    int shifter = i;
++    do{ //Move to where representation ends
++        ++p;
++        shifter = shifter/10;
++    }while(shifter);
++    *p = '\0';
++    do{ //Move back, inserting digits as u go
++        *--p = digit[i%10];
++        i = i/10;
++    }while(i);
++    return b;
++}
++
++//remove swap file of proc p;
++int
++removeSwapFile(struct proc* p)
++{
++	//path of proccess
++	char path[DIGITS];
++	memmove(path,"/.swap", 6);
++	itoa(p->pid, path+ 6);
++
++	struct inode *ip, *dp;
++	struct dirent de;
++	char name[DIRSIZ];
++	uint off;
++
++	if(0 == p->swapFile)
++	{
++		return -1;
++	}
++	fileclose(p->swapFile);
++
++	begin_op();
++	if((dp = nameiparent(path, name)) == 0)
++	{
++		end_op();
++		return -1;
++	}
++
++	ilock(dp);
++
++	  // Cannot unlink "." or "..".
++	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
++	   goto bad;
++
++	if((ip = dirlookup(dp, name, &off)) == 0)
++		goto bad;
++	ilock(ip);
++
++	if(ip->nlink < 1)
++		panic("unlink: nlink < 1");
++	if(ip->type == T_DIR && !isdirempty(ip)){
++		iunlockput(ip);
++		goto bad;
++	}
++
++	memset(&de, 0, sizeof(de));
++	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
++		panic("unlink: writei");
++	if(ip->type == T_DIR){
++		dp->nlink--;
++		iupdate(dp);
++	}
++	iunlockput(dp);
++
++	ip->nlink--;
++	iupdate(ip);
++	iunlockput(ip);
++
++	end_op();
++
++	return 0;
++
++	bad:
++		iunlockput(dp);
++		end_op();
++		return -1;
++
++}
++
++
++//return 0 on success
++int
++createSwapFile(struct proc* p)
++{
++
++	char path[DIGITS];
++	memmove(path,"/.swap", 6);
++	itoa(p->pid, path+ 6);
++
++    begin_op();
++    struct inode * in = create(path, T_FILE, 0, 0);
++	iunlock(in);
++
++	p->swapFile = filealloc();
++	if (p->swapFile == 0)
++		panic("no slot for files on /store");
++
++	p->swapFile->ip = in;
++	p->swapFile->type = FD_INODE;
++	p->swapFile->off = 0;
++	p->swapFile->readable = O_WRONLY;
++	p->swapFile->writable = O_RDWR;
++    end_op();
++
++    return 0;
++}
++
++//return as sys_write (-1 when error)
++int
++writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
++{
++	p->swapFile->off = placeOnFile;
++
++	return filewrite(p->swapFile, buffer, size);
++
++}
++
++//return as sys_read (-1 when error)
++int
++readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
++{
++	p->swapFile->off = placeOnFile;
++
++	return fileread(p->swapFile, buffer,  size);
++}
++
+diff --git a/mmu.h b/mmu.h
+index a82d8e2..aec4420 100644
+--- a/mmu.h
++++ b/mmu.h
+@@ -95,6 +95,8 @@ struct segdesc {
+ #define PTE_W           0x002   // Writeable
+ #define PTE_U           0x004   // User
+ #define PTE_PS          0x080   // Page Size
++#define PTE_A           0x020   // Accessed
++#define PTE_PG          0x200   // Paged out to secondary storage
+ 
+ // Address in page table or page directory entry
+ #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
+diff --git a/proc.h b/proc.h
+index 1647114..9f65fae 100644
+--- a/proc.h
++++ b/proc.h
+@@ -49,6 +49,8 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  //Swap file. must initiate with create swap file
++  struct file *swapFile;			//page file
+ };
+ 
+ // Process memory is laid out contiguously, low addresses first:
+diff --git a/sysfile.c b/sysfile.c
+index 87e508b..22d3588 100644
+--- a/sysfile.c
++++ b/sysfile.c
+@@ -165,7 +165,7 @@ bad:
+ }
+ 
+ // Is the directory dp empty except for "." and ".." ?
+-static int
++int
+ isdirempty(struct inode *dp)
+ {
+   int off;
+@@ -238,7 +238,7 @@ bad:
+   return -1;
+ }
+ 
+-static struct inode*
++struct inode*
+ create(char *path, short type, short major, short minor)
+ {
+   uint off;
diff --git a/proc.c b/proc.c
index 806b1b1..58c069a 100644
--- a/proc.c
+++ b/proc.c
@@ -112,6 +112,24 @@ found:
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
 
+  // init page data for process
+  int i;
+  for (i=0;i<MAX_PSYC_PAGES;i++) 
+  {
+    p->ppm[i].va = (char*)0xffffffff;
+    p->ppm[i].next = 0;
+    p->ppm[i].prev = 0;
+    p->ppm[i].age = 0;
+    p->psf[i].age = 0;
+    p->psf[i].swaploc = 0;
+    p->psf[i].va = (char*)0xffffffff;
+  }
+  p->ppmCount = 0;
+  p->psfCount = 0;
+  p->pfCount = 0;
+  p->poCount = 0;
+  p->head = 0;
+  p->tail = 0;
   return p;
 }
 
@@ -180,15 +198,13 @@ growproc(int n)
 int
 fork(void)
 {
-  int i, pid;
+  int i,j,pid;
   struct proc *np;
   struct proc *curproc = myproc();
-
   // Allocate process.
   if((np = allocproc()) == 0){
     return -1;
   }
-
   // Copy process state from proc.
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
     kfree(np->kstack);
@@ -196,26 +212,77 @@ fork(void)
     np->state = UNUSED;
     return -1;
   }
+
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
-
+  /*******************************************************/
+  np->ppmCount = curproc->ppmCount;
+  np->psfCount = curproc->psfCount; 
+  /*******************************************************/
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
-
   for(i = 0; i < NOFILE; i++)
     if(curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
   np->cwd = idup(curproc->cwd);
-
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-
   pid = np->pid;
 
-  acquire(&ptable.lock);
+  /*******************************************************/
+  // copy parent process to child
+  createSwapFile(np);
+  char buffer[PGSIZE/2] = "";
+  int offset = 0;
+  int readOfftest = 0;
+  if(strncmp(curproc->name,"init",4)!=0 && strncmp(curproc->name,"sh",2)!=0) 
+  {
+    while ((readOfftest=readFromSwapFile(curproc,buffer,offset,PGSIZE/2))!= 0)
+    {
+      if(writeToSwapFile(np,buffer,offset,readOfftest)==-1)
+      {
+        panic("fork error while writing parent's swap file to child");
+      }
+      offset += readOfftest;
+    }
+  }
+  for(i=0;i<MAX_PSYC_PAGES;i++) // copy variable from parent
+  {
+    np->ppm[i].va = curproc->ppm[i].va;
+    np->ppm[i].age = curproc->ppm[i].age;
+    np->psf[i].age = curproc->psf[i].age;
+    np->psf[i].va = curproc->psf[i].va;
+    np->psf[i].swaploc = curproc->psf[i].swaploc;
+  }
+  for(i=0;i<MAX_PSYC_PAGES;i++) // readdress next and prev for np
+  {
+    for(j=0;j<MAX_PSYC_PAGES;j++)
+    {
+      if(np->ppm[j].va == curproc->ppm[i].next->va)
+      {
+        np->ppm[i].next = &np->ppm[j];
+      }
+      if(np->ppm[j].va == curproc->ppm[i].prev->va)
+      {
+        np->ppm[i].prev = &np->ppm[j];
+      }
+    }
+  }
+  for(i=0;i<MAX_PSYC_PAGES;i++) // readdress head and tail for np
+  {
+    if(np->ppm[i].va == curproc->head->va)
+    {
+      np->head = &np->ppm[i];
+    }
+    if(np->ppm[i].va == curproc->tail->va)
+    {
+      np->tail = &np->ppm[i];
+    }
+  }
+  /*******************************************************/
 
+  acquire(&ptable.lock);
   np->state = RUNNABLE;
-
   release(&ptable.lock);
 
   return pid;
@@ -242,6 +309,10 @@ exit(void)
     }
   }
 
+  // remove swap file
+  if (removeSwapFile(curproc)!=0)
+    panic("exit: error deleting swap file");
+
   begin_op();
   iput(curproc->cwd);
   end_op();
diff --git a/proc.h b/proc.h
index 1647114..7d66714 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,6 @@
+#define MAX_PSYC_PAGES 15
+#define MAX_TOTAL_PAGES 30
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -34,6 +37,21 @@ struct context {
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+/*******************************************************/
+struct pagePhyMem {
+  char *va;
+  int age;
+  struct pagePhyMem *next;
+  struct pagePhyMem *prev;
+};
+
+struct pageSwapFile {
+  uint swaploc;
+  int age;
+  char *va;
+};
+/*******************************************************/
+
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -49,10 +67,17 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-};
 
-// Process memory is laid out contiguously, low addresses first:
-//   text
-//   original data and bss
-//   fixed-size stack
-//   expandable heap
+  /*******************************************************/
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;			 //page file
+  int ppmCount;                // no of pages in physical memory
+  int psfCount;                // no of pages in swap file 
+  int pfCount;                 // no of page fault for this process
+  int poCount;                 // no of pages swapped in swap file 
+  struct pagePhyMem ppm[MAX_PSYC_PAGES];   // Pre-allocated space for the pages in physical memory linked list
+  struct pageSwapFile psf[MAX_PSYC_PAGES]; // Pre-allocated space for the pages in swap file array
+  struct pagePhyMem *head;        // head of the pages in physical memory linked list
+  struct pagePhyMem *tail;        // tail of the pages in physical memory linked list
+  /*******************************************************/
+};
diff --git a/sysfile.c b/sysfile.c
index 87e508b..22d3588 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,7 @@ bad:
   return -1;
 }
 
-static struct inode*
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   uint off;
diff --git a/trap.c b/trap.c
index 41c66eb..9e38908 100644
--- a/trap.c
+++ b/trap.c
@@ -36,6 +36,8 @@ idtinit(void)
 void
 trap(struct trapframe *tf)
 {
+  uint vaddr;
+  pde_t *addr;
   if(tf->trapno == T_SYSCALL){
     if(myproc()->killed)
       exit();
@@ -78,6 +80,19 @@ trap(struct trapframe *tf)
     lapiceoi();
     break;
 
+  case T_PGFLT:
+  vaddr = rcr2();
+  addr = &myproc()->pgdir[PDX(vaddr)];
+  if(((int)(*addr) & PTE_P)!=0) // hard page fault
+  {
+    if(((uint*)PTE_ADDR(P2V(*addr)))[PTX(vaddr)] & PTE_PG) // in swap file
+    {
+      swapPageFromSF(PTE_ADDR(vaddr));
+      myproc()->pfCount++;
+      return;
+    }
+  }
+    break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff --git a/vm.c b/vm.c
index 7134cff..d4007ae 100644
--- a/vm.c
+++ b/vm.c
@@ -6,6 +6,7 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#define BUF_SIZE PGSIZE/4
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
@@ -216,6 +217,68 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
   return 0;
 }
 
+struct pagePhyMem* moveToSwap(struct pagePhyMem *head)
+{
+  int i,index;
+  struct pagePhyMem *temp,*tail;
+  for(i=0;i<MAX_PSYC_PAGES;i++) // finding a empty swapfile
+  {
+    if(myproc()->psf[i].va == (char*)0xffffffff)
+    {
+      index=i;
+      goto FoundSlot;
+    }
+  }
+  panic("Swapping slot not found.\n");
+  FoundSlot:
+  // find the tail-1
+  temp=head;
+  if (head == 0)
+    panic("fifoWrite: proc->head is NULL");
+  if (head->next == 0)
+    panic("fifoWrite: single page in phys mem");
+  // findin the prev of tail
+  while (temp->next->next!=0)
+  {
+    temp = temp->next;
+  }
+  tail = temp->next;
+  temp->next = 0;
+  myproc()->psf[index].va=tail->va; // add to swapped array
+  myproc()->psfCount++;
+  myproc()->poCount++;
+  if(writeToSwapFile(myproc(),(char*)PTE_ADDR(tail->va),index*PGSIZE,PGSIZE)<0)
+    return 0; // if swap fails
+  pte_t *pte = walkpgdir(myproc()->pgdir,(void*)tail->va,0);
+  if(!*pte)
+  {
+    panic("pte empty in moveToSwap\n");
+  }
+  // freeing memory
+  kfree((char*)PTE_ADDR(P2V_WO(*walkpgdir(myproc()->pgdir,tail->va,0))));
+  *pte = PTE_W | PTE_U | PTE_PG;
+  lcr3(V2P(myproc()->pgdir));
+  return tail;
+}
+
+void addToRam(char *va)
+{
+  int i;
+  for(i=0;i<MAX_PSYC_PAGES;i++) // finding an empty slot
+  {
+    if(myproc()->ppm[i].va==(char*)0xffffffff)
+    {
+      goto FoundRamSlot;
+    }
+  }
+  panic("no physical page memory found\n");
+  FoundRamSlot:
+  myproc()->ppm[i].va = va;
+  myproc()->ppm[i].next = myproc()->head;
+  myproc()->head = &myproc()->ppm[i];
+  myproc()->ppmCount++;
+}
+
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 int
@@ -230,20 +293,35 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
     return oldsz;
 
   a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
+  for(; a < newsz; a += PGSIZE)
+  {
     mem = kalloc();
-    if(mem == 0){
+    if(mem == 0)
+    {
       cprintf("allocuvm out of memory\n");
       deallocuvm(pgdir, newsz, oldsz);
       return 0;
     }
     memset(mem, 0, PGSIZE);
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0)
+    {
       cprintf("allocuvm out of memory (2)\n");
       deallocuvm(pgdir, newsz, oldsz);
       kfree(mem);
       return 0;
     }
+    /*******************************************************/
+    if(myproc()->ppmCount>=MAX_PSYC_PAGES) // save the tail to file and free memory
+    {
+        struct pagePhyMem *temp = moveToSwap(myproc()->head); 
+        temp->va = (char*)a;
+        temp->next = myproc()->head;
+        myproc()->head = temp; // update head
+    }
+    else // add to physical memory 
+    { 
+        addToRam((char*)a);
+    }
   }
   return newsz;
 }
@@ -257,23 +335,68 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   pte_t *pte;
   uint a, pa;
+  int i;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
+  for(; a  < oldsz; a += PGSIZE)
+  {
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-    else if((*pte & PTE_P) != 0){
+    else if((*pte & PTE_P) != 0) // remove from physical memory array
+    {
       pa = PTE_ADDR(*pte);
       if(pa == 0)
         panic("kfree");
+      /******************************************************/
+      if(myproc()->pgdir == pgdir)
+      {
+        for(i=0;i<MAX_PSYC_PAGES;i++)
+        {
+          if(myproc()->ppm[i].va == (char*)a)
+          {
+            goto FoundDeallockP;
+          }
+        }
+        panic("deallocaion entry not found (P)\n");
+        FoundDeallockP:
+        myproc()->ppm[i].va = (char*) 0xffffffff;
+        if(myproc()->head == &myproc()->ppm[i]) // head
+        {
+          myproc()->head = myproc()->ppm[i].next;
+        }
+        else
+        {
+          struct pagePhyMem *temp = myproc()->head;
+          while(temp->next != &myproc()->ppm[i])
+          {
+            temp = temp->next;
+          }
+          temp->next = myproc()->ppm[i].next;
+        }
+        myproc()->ppm[i].next=0;
+        myproc()->ppmCount--;
+      }
+      /******************************************************/
       char *v = P2V(pa);
       kfree(v);
       *pte = 0;
     }
+    else if(*pte & PTE_PG && myproc()->pgdir == pgdir) // remove from swap array
+    {
+      for(i=0;i<MAX_PSYC_PAGES;i++)
+      {
+        if(myproc()->psf[i].va == (char*)a)
+          goto FoundDeallockPG;
+      }
+      panic("deallocaion entry not found (PG)");
+      FoundDeallockPG:
+      myproc()->psf[i].va = (char*) 0xffffffff;
+      myproc()->psfCount--;
+    }
   }
   return newsz;
 }
@@ -385,6 +508,68 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
   return 0;
 }
 
+void swapPageFromSF(uint addr)
+{
+  // check if the process in init/sh
+  if(strncmp(myproc()->name,"init",4)==0 || strncmp(myproc()->name,"sh",2)==0)
+  {
+    myproc()->ppmCount++;
+    return;
+  }
+  char buffer[BUF_SIZE];
+  pte_t *ptePM,*pteNew;
+  struct pagePhyMem *temp=myproc()->head,*tail;
+  // find the second last
+  while(temp->next->next!=0)
+  {
+    temp=temp->next;
+  }
+  tail=temp->next;
+  temp->next=0;
+  // address of pte from physical memory
+  ptePM=walkpgdir(myproc()->pgdir,(void*)tail->va,0);
+  if(!*ptePM)
+  {
+    panic("ptePM empty\n");
+  }
+  // finding a position in swapfile page
+  int i,index;
+  for(i=0;i<MAX_PSYC_PAGES;i++)
+  {
+    if(myproc()->psf[i].va == (char*)PTE_ADDR(addr))
+    {
+      index=i;
+      goto FoundSlotSwap;
+    }
+  }
+  panic("no space for swapping\n");
+  FoundSlotSwap:
+  // move tail from pm to sf
+  myproc()->psf[index].va = tail->va;
+  // create pte for new address
+  pteNew=walkpgdir(myproc()->pgdir,(void*)addr,0);
+  if(!*pteNew)
+  {
+    panic("pteNew empty\n");
+  }
+  *pteNew=PTE_ADDR(*ptePM) | PTE_W | PTE_U | PTE_P;
+  for(i=0;i<4;i++)
+  {
+    int location=(index*PGSIZE)+((PGSIZE/4)*i);
+    int addressOffset=((PGSIZE/4)*i);
+    memset(buffer,0,BUF_SIZE);
+    readFromSwapFile(myproc(),buffer,location,BUF_SIZE); // read newpage from swap file
+    writeToSwapFile(myproc(),(char*)(P2V_WO(PTE_ADDR(*ptePM))+addressOffset),location,BUF_SIZE); // write that to memory
+    memmove((void*)(PTE_ADDR(addr)+addressOffset),(void*)buffer,BUF_SIZE);
+  }
+  *ptePM=PTE_PG | PTE_U | PTE_W;
+  tail->next=myproc()->head;
+  myproc()->head=tail;
+  tail->va=(char*)PTE_ADDR(addr);
+  lcr3(V2P(myproc()->pgdir));
+  myproc()->poCount++;
+}
+
 //PAGEBREAK!
 // Blank page.
 //PAGEBREAK!
